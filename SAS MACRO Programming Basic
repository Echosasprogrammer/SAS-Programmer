概念：宏 和  宏变量
MACROS VS. MACRO VARIABLES

1.宏变量以“ & ”开头
2.宏 以“%”开头。
3.宏变量（macro variable）类似与标准 数据变量（data variable），不同之处在于：宏变量不属于data set，且，宏变量的值只能是 character。
4.宏变量的值可以是3种：a variable name, a numeral, any text ( 任何你想在程序中替换的文本。)
5.宏：一个宏，是SAS Program中的一大段代码，可以包含复杂的逻辑，包含：完整的DATA步和Proc 步，和Macro statements，如 %IF-%THEN/%ELSE 和 %DO-%END。
6.Macro 经常，但不总是包含 Macro variables。 

局部宏变量和全局宏变量
1.宏变量包含两种：local 和 global。
2.局部宏变量：A macro variable’s scope is local if it is defined inside a macro.
3.全局宏变量：Its scope is global if it is defined in “open code” which is everything outside a macro.
4.使用范围： You can use a global macro variable anywhere in your program, but you can use a local macro variable only inside its own macro. 
宏处理器不会解析单引号里面的宏。要解析放在引号里面的宏程序，就必须放在双引号里。

使用 %LET 代替text
1.%LET 宏语句功能：分配一个值给一个宏变量。 simply assigns a value to a macro variable.
2.Suppose you have a program that you run once a month. Every time you have to edit the program so it will select data for the correct month and print the correct title. This is time-consuming and prone to errors. You can use %LET to create a macro variable. Then you can change the value of the macro variable in the %LET statement, and SAS will repeat the new value throughout your program.
3.%LET语句语法：%LET macro-variable-name = value;
4.例如：
%LET iterations = 5;
%LET winner = Lance Armstrong;
Notice that there are no quotation marks around value even when it contains characters. Blanks at the beginning and end will be trimmed, and everything else between the equal sign and semicolon will become part of the value for the macro variable.

1.在使用Macro variable时，只需要在 在宏变量名前加 “&” 符号。无论在程序的任何位置调用宏变量。





Creating Modular Code with Macros
Macros are simply a group of SAS statements that have a name.

当定义好宏之后，每次使用该宏的时候调用该宏。语法： %macro-name

调用宏的时候不强制以分号 “ ; ” 结尾。 



Adding Parameters To Macros
参数Parameters是宏变量，其值在调用宏的时候分配。
这些宏变量是在Macro内部定义的，所以是局部宏变量。 



%MACRO macro-name (parameter-1=, parameter-2=, . . . parameter-n=);
	macro-text
%MEND macro-name; 

例如,定义宏：%MACRO monthlyreport(month=, region= );

调用宏： %monthlyreport( month=May, region=West ) 


MPRINT system option
我们已经展示过在 Macro processor 解析过你的program后SAS看到的内容。但是，你不能看到这些statements。所以需要打开MPRINT系统选项，使得在SAS log中打印从macros中解析的statements。

语法： OPTIONS MPRINT; 






由Macro processor产生的statements都以 “MPRINT(SORTANDPRINT)”为标识。

    The statements generated by the macro processor are all labeled with the word MPRINT followed by the name of the macro that generated the statements。

    By using the MPRINT system option it is easy to see the standard SAS statements your macro is generating. 

条件逻辑

These statements probably look familiar because there are parallel statements in standard SAS code, but don’t confuse these with their standard counterparts. These statements can only be used inside a macro, and can perform actions that would be completely impossible for standard SAS statements. With %IF, actions can include other macro statements or even complete DATA and Proc steps. Remember, the macro statements won’t appear in the standard SAS code generated by the macro processor because you are writing a program that writes a program.

    宏语句不会出现在经过Macro processor解析生成的 standard SAS code中。因为，宏编程是在 writing a program that writes a program. 

自动宏变量
Automatic macro variables

每当调用SAS时，Macro processor都会自动生成默写宏变量，如&SYSDATE, &SYSDAY。这些宏变量都可以在程序编程中使用。 

例：某公司有一个文件Order.dat，含有每天接收到的订单。每个订单都包含customer ID number，date the order,model name, quantity ordered。编写程序，实现：每周一打印报表显示所有的订单。每周五，打印customer的汇总表。 



结果





Data-Driven Programs
CALL SYMPUT 从Data步获取一个value，然后分配给一个宏变量。这个宏变量会在之后的程序中使用。

使用CALL SYMPUT 宏例程，可以让macro program查看data并让宏程序决定自己该做什么。

    This is where your macro programs begin to take on a life of their own. Using the CALL SYMPUT macro routine you can let a macro program look at the data and then decide for itself what to do. CALL SYMPUT takes a value from a DATA step and assigns it to a macro variable which you can then use later in your program.

 这个还是不太懂

